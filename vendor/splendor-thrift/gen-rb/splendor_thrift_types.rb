#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module SplendorThrift
  module JewelType
    DIAMOND = 0
    SAPPHIRE = 1
    EMERALD = 2
    RUBY = 3
    ONYX = 4
    GOLD = 5
    VALUE_MAP = {0 => "DIAMOND", 1 => "SAPPHIRE", 2 => "EMERALD", 3 => "RUBY", 4 => "ONYX", 5 => "GOLD"}
    VALID_VALUES = Set.new([DIAMOND, SAPPHIRE, EMERALD, RUBY, ONYX, GOLD]).freeze
  end

  module CardGrade
    FIRST = 1
    SECOND = 2
    THIRD = 3
    VALUE_MAP = {1 => "FIRST", 2 => "SECOND", 3 => "THIRD"}
    VALID_VALUES = Set.new([FIRST, SECOND, THIRD]).freeze
  end

  module CardLocation
    PACK = 0
    EXHIBITION = 1
    VALUE_MAP = {0 => "PACK", 1 => "EXHIBITION"}
    VALID_VALUES = Set.new([PACK, EXHIBITION]).freeze
  end

  class Card
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    CARDGRADE = 2
    REVEALED = 3
    JEWELTYPE = 6
    POINT = 7
    COSTS = 8

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
      CARDGRADE => {:type => ::Thrift::Types::I32, :name => 'cardGrade', :enum_class => ::SplendorThrift::CardGrade},
      REVEALED => {:type => ::Thrift::Types::BOOL, :name => 'revealed'},
      JEWELTYPE => {:type => ::Thrift::Types::I32, :name => 'jewelType', :optional => true, :enum_class => ::SplendorThrift::JewelType},
      POINT => {:type => ::Thrift::Types::I32, :name => 'point', :optional => true},
      COSTS => {:type => ::Thrift::Types::MAP, :name => 'costs', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}, :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cardGrade is unset!') unless @cardGrade
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field revealed is unset!') if @revealed.nil?
      unless @cardGrade.nil? || ::SplendorThrift::CardGrade::VALID_VALUES.include?(@cardGrade)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field cardGrade!')
      end
      unless @jewelType.nil? || ::SplendorThrift::JewelType::VALID_VALUES.include?(@jewelType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field jewelType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JewelChip
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    JEWELTYPE = 6

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
      JEWELTYPE => {:type => ::Thrift::Types::I32, :name => 'jewelType', :enum_class => ::SplendorThrift::JewelType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jewelType is unset!') unless @jewelType
      unless @jewelType.nil? || ::SplendorThrift::JewelType::VALID_VALUES.include?(@jewelType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field jewelType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Noble
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    POINT = 7
    COSTS = 8

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
      POINT => {:type => ::Thrift::Types::I32, :name => 'point'},
      COSTS => {:type => ::Thrift::Types::MAP, :name => 'costs', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}, :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field point is unset!') unless @point
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Player
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    ISME = 2
    PURCHASEDCARDS = 3
    RESERVEDCARDS = 4
    JEWELCHIPS = 5
    NOBLES = 6

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
      ISME => {:type => ::Thrift::Types::BOOL, :name => 'isMe'},
      PURCHASEDCARDS => {:type => ::Thrift::Types::MAP, :name => 'purchasedCards', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Card}}},
      RESERVEDCARDS => {:type => ::Thrift::Types::SET, :name => 'reservedCards', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Card}},
      JEWELCHIPS => {:type => ::Thrift::Types::MAP, :name => 'jewelChips', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::JewelChip}}},
      NOBLES => {:type => ::Thrift::Types::SET, :name => 'nobles', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Noble}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field isMe is unset!') if @isMe.nil?
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field purchasedCards is unset!') unless @purchasedCards
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reservedCards is unset!') unless @reservedCards
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jewelChips is unset!') unless @jewelChips
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field nobles is unset!') unless @nobles
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CenterField
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CARDS = 1
    JEWELCHIPS = 2
    NOBLES = 3

    FIELDS = {
      CARDS => {:type => ::Thrift::Types::MAP, :name => 'cards', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::CardLocation}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::CardGrade}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Card}}}},
      JEWELCHIPS => {:type => ::Thrift::Types::MAP, :name => 'jewelChips', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::JewelChip}}},
      NOBLES => {:type => ::Thrift::Types::SET, :name => 'nobles', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Noble}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cards is unset!') unless @cards
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jewelChips is unset!') unless @jewelChips
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field nobles is unset!') unless @nobles
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Game
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    CENTERFIELD = 2
    PLAYERS = 3

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
      CENTERFIELD => {:type => ::Thrift::Types::STRUCT, :name => 'centerField', :class => ::SplendorThrift::CenterField},
      PLAYERS => {:type => ::Thrift::Types::LIST, :name => 'players', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Player}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field centerField is unset!') unless @centerField
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field players is unset!') unless @players
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PurchaseCard
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CARDID = 1
    NOBLEID = 2
    RETURNJEWELCHIPMAP = 3

    FIELDS = {
      CARDID => {:type => ::Thrift::Types::STRING, :name => 'cardId'},
      NOBLEID => {:type => ::Thrift::Types::STRING, :name => 'nobleId', :optional => true},
      RETURNJEWELCHIPMAP => {:type => ::Thrift::Types::MAP, :name => 'returnJewelChipMap', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cardId is unset!') unless @cardId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field returnJewelChipMap is unset!') unless @returnJewelChipMap
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReserveCard
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CARDID = 1
    RECEIVEJEWELCHIPMAP = 2
    RETURNJEWELCHIPMAP = 3

    FIELDS = {
      CARDID => {:type => ::Thrift::Types::STRING, :name => 'cardId'},
      RECEIVEJEWELCHIPMAP => {:type => ::Thrift::Types::MAP, :name => 'receiveJewelChipMap', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}},
      RETURNJEWELCHIPMAP => {:type => ::Thrift::Types::MAP, :name => 'returnJewelChipMap', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cardId is unset!') unless @cardId
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field receiveJewelChipMap is unset!') unless @receiveJewelChipMap
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field returnJewelChipMap is unset!') unless @returnJewelChipMap
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReceiveJewelChip
    include ::Thrift::Struct, ::Thrift::Struct_Union
    RECEIVEJEWELCHIPMAP = 1
    RETURNJEWELCHIPMAP = 2

    FIELDS = {
      RECEIVEJEWELCHIPMAP => {:type => ::Thrift::Types::MAP, :name => 'receiveJewelChipMap', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}},
      RETURNJEWELCHIPMAP => {:type => ::Thrift::Types::MAP, :name => 'returnJewelChipMap', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field receiveJewelChipMap is unset!') unless @receiveJewelChipMap
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field returnJewelChipMap is unset!') unless @returnJewelChipMap
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActionResult < ::Thrift::Union
    include ::Thrift::Struct_Union
    class << self
      def purchaseCard(val)
        ActionResult.new(:purchaseCard, val)
      end

      def reserveCard(val)
        ActionResult.new(:reserveCard, val)
      end

      def receiveJewelChip(val)
        ActionResult.new(:receiveJewelChip, val)
      end
    end

    PURCHASECARD = 1
    RESERVECARD = 2
    RECEIVEJEWELCHIP = 3

    FIELDS = {
      PURCHASECARD => {:type => ::Thrift::Types::STRUCT, :name => 'purchaseCard', :class => ::SplendorThrift::PurchaseCard},
      RESERVECARD => {:type => ::Thrift::Types::STRUCT, :name => 'reserveCard', :class => ::SplendorThrift::ReserveCard},
      RECEIVEJEWELCHIP => {:type => ::Thrift::Types::STRUCT, :name => 'receiveJewelChip', :class => ::SplendorThrift::ReceiveJewelChip}
    }

    def struct_fields; FIELDS; end

    def validate
      raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
    end

    ::Thrift::Union.generate_accessors self
  end

end
