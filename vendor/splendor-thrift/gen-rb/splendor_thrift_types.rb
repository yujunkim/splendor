#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module SplendorThrift
  module JewelType
    DIAMOND = 0
    SAPPHIRE = 1
    EMERALD = 2
    RUBY = 3
    ONYX = 4
    GOLD = 5
    VALUE_MAP = {0 => "DIAMOND", 1 => "SAPPHIRE", 2 => "EMERALD", 3 => "RUBY", 4 => "ONYX", 5 => "GOLD"}
    VALID_VALUES = Set.new([DIAMOND, SAPPHIRE, EMERALD, RUBY, ONYX, GOLD]).freeze
  end

  module CardGrade
    FIRST = 1
    SECOND = 2
    THIRD = 3
    VALUE_MAP = {1 => "FIRST", 2 => "SECOND", 3 => "THIRD"}
    VALID_VALUES = Set.new([FIRST, SECOND, THIRD]).freeze
  end

  module ActionType
    PURCHASE_CARD = 0
    RESERVE_CARD = 1
    RECEIVE_JEWEL_CHIP = 2
    VALUE_MAP = {0 => "PURCHASE_CARD", 1 => "RESERVE_CARD", 2 => "RECEIVE_JEWEL_CHIP"}
    VALID_VALUES = Set.new([PURCHASE_CARD, RESERVE_CARD, RECEIVE_JEWEL_CHIP]).freeze
  end

  module CardLocation
    PACK = 0
    EXHIBITION = 1
    VALUE_MAP = {0 => "PACK", 1 => "EXHIBITION"}
    VALID_VALUES = Set.new([PACK, EXHIBITION]).freeze
  end

  class Card
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    CARDGRADE = 2
    REVEALED = 3
    RESERVED = 4
    JEWELTYPE = 6
    POINT = 7
    COSTS = 8

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'},
      CARDGRADE => {:type => ::Thrift::Types::I32, :name => 'cardGrade', :enum_class => ::SplendorThrift::CardGrade},
      REVEALED => {:type => ::Thrift::Types::BOOL, :name => 'revealed'},
      RESERVED => {:type => ::Thrift::Types::BOOL, :name => 'reserved'},
      JEWELTYPE => {:type => ::Thrift::Types::I32, :name => 'jewelType', :optional => true, :enum_class => ::SplendorThrift::JewelType},
      POINT => {:type => ::Thrift::Types::I32, :name => 'point', :optional => true},
      COSTS => {:type => ::Thrift::Types::MAP, :name => 'costs', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}, :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cardGrade is unset!') unless @cardGrade
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field revealed is unset!') if @revealed.nil?
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reserved is unset!') if @reserved.nil?
      unless @cardGrade.nil? || ::SplendorThrift::CardGrade::VALID_VALUES.include?(@cardGrade)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field cardGrade!')
      end
      unless @jewelType.nil? || ::SplendorThrift::JewelType::VALID_VALUES.include?(@jewelType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field jewelType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class JewelChip
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    JEWELTYPE = 6

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'},
      JEWELTYPE => {:type => ::Thrift::Types::I32, :name => 'jewelType', :enum_class => ::SplendorThrift::JewelType}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jewelType is unset!') unless @jewelType
      unless @jewelType.nil? || ::SplendorThrift::JewelType::VALID_VALUES.include?(@jewelType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field jewelType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Noble
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    POINT = 7
    COSTS = 8

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'},
      POINT => {:type => ::Thrift::Types::I32, :name => 'point'},
      COSTS => {:type => ::Thrift::Types::MAP, :name => 'costs', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}, :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field point is unset!') unless @point
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Player
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    ISME = 2
    PURCHASEDCARDS = 3
    RESERVEDCARDS = 4
    JEWELCHIPS = 5
    NOBLES = 6

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'},
      ISME => {:type => ::Thrift::Types::BOOL, :name => 'isMe'},
      PURCHASEDCARDS => {:type => ::Thrift::Types::MAP, :name => 'purchasedCards', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Card}}},
      RESERVEDCARDS => {:type => ::Thrift::Types::SET, :name => 'reservedCards', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Card}},
      JEWELCHIPS => {:type => ::Thrift::Types::MAP, :name => 'jewelChips', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::JewelChip}}},
      NOBLES => {:type => ::Thrift::Types::SET, :name => 'nobles', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Noble}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field isMe is unset!') if @isMe.nil?
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field purchasedCards is unset!') unless @purchasedCards
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reservedCards is unset!') unless @reservedCards
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jewelChips is unset!') unless @jewelChips
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field nobles is unset!') unless @nobles
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CenterField
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CARDS = 1
    JEWELCHIPS = 2
    NOBLES = 3

    FIELDS = {
      CARDS => {:type => ::Thrift::Types::MAP, :name => 'cards', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::CardLocation}, :value => {:type => ::Thrift::Types::MAP, :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::CardGrade}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Card}}}},
      JEWELCHIPS => {:type => ::Thrift::Types::MAP, :name => 'jewelChips', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::SET, :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::JewelChip}}},
      NOBLES => {:type => ::Thrift::Types::SET, :name => 'nobles', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Noble}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field cards is unset!') unless @cards
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field jewelChips is unset!') unless @jewelChips
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field nobles is unset!') unless @nobles
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Game
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    CENTERFIELD = 2
    PLAYERS = 3

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'},
      CENTERFIELD => {:type => ::Thrift::Types::STRUCT, :name => 'centerField', :class => ::SplendorThrift::CenterField},
      PLAYERS => {:type => ::Thrift::Types::SET, :name => 'players', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SplendorThrift::Player}}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field centerField is unset!') unless @centerField
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field players is unset!') unless @players
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActionResult
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ACTIONTYPE = 1
    CARDID = 2
    RECEIVEJEWELCHIPMAP = 3
    RETURNJEWELCHIPMAP = 4

    FIELDS = {
      ACTIONTYPE => {:type => ::Thrift::Types::I32, :name => 'actionType', :enum_class => ::SplendorThrift::ActionType},
      CARDID => {:type => ::Thrift::Types::I32, :name => 'cardId', :optional => true},
      RECEIVEJEWELCHIPMAP => {:type => ::Thrift::Types::MAP, :name => 'receiveJewelChipMap', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}, :optional => true},
      RETURNJEWELCHIPMAP => {:type => ::Thrift::Types::MAP, :name => 'returnJewelChipMap', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SplendorThrift::JewelType}, :value => {:type => ::Thrift::Types::I32}, :optional => true}
    }

    def struct_fields; FIELDS; end

    def validate
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field actionType is unset!') unless @actionType
      unless @actionType.nil? || ::SplendorThrift::ActionType::VALID_VALUES.include?(@actionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field actionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

end
